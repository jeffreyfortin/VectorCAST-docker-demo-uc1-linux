ENVIRO.NEW
ENVIRO.NAME:L1_HAL_MODEL
ENVIRO.STUB_BY_FUNCTION:L1_RxTx
ENVIRO.MAX_VARY_RANGE: 20
ENVIRO.STUB: ALL_BY_PROTOTYPE
ENVIRO.TYPE_HANDLED_DIRS_ALLOWED:
ENVIRO.LIBRARY_STUBS:
ENVIRO.UNIT_PREFIX_USER_CODE:
ENVIRO.UNIT_PREFIX_USER_CODE_FILE:L1_RxTx


struct
{
        unsigned int Device_Reset : 1;
        unsigned int Tx_Ack       : 1;
        unsigned int Rx_ack       : 1;
        unsigned int spare        : 29;
} g_command_reg;

struct
{
        unsigned int GeneralErr      : 1;
        unsigned int TxErr           : 1;
        unsigned int RxErr           : 1;
        unsigned int TxMsgComplete   : 1;
        unsigned int RxMsgPresent    : 1;
        unsigned int spare           : 27;
} g_status_reg;

#include "L1_RxTx.h"
#undef  COMM_STATUS_REG
#define COMM_STATUS_REG ((unsigned int *)&g_status_reg)
#undef  COMM_COMMAND_REG
#define COMM_COMMAND_REG ((unsigned int *)&g_command_reg)
ENVIRO.END_UNIT_PREFIX_USER_CODE_FILE:
ENVIRO.END_UNIT_PREFIX_USER_CODE:
ENVIRO.STUB_USER_CODE_FILE:

BEGINNING_OF_STUB.uut_prototype_stubs.led_ctrl
printf("\n%s set to %s\n\n",(led_num==1)?"RX LED" : (led_num==2)?"TX LED" : "RESET LED", (color==GREEN)?"GREEN" : "RED");
END_BEGINNING_OF_STUB.uut_prototype_stubs.led_ctrl
ENVIRO.END_STUB_USER_CODE_FILE:
ENVIRO.PROBE_POINTS:
PROBE_ID: 2
PROBE_UNIT: L1_RxTx
PROBE_FUNCTION: comm_isr
PROBE_LINE: tx_cnt++;
PROBE_CONTEXT_BEFORE:
*((unsigned int *)&g_command_reg) = *((unsigned int *)&g_command_reg) | 0x00000002;
led_ctrl(2, GREEN );
END_PROBE_CONTEXT_BEFORE:
PROBE_CONTEXT_AFTER:
}
else if (sts_reg & 0x00000002)
END_PROBE_CONTEXT_AFTER:
PROBE_CODE:
// increment the test data variable: tx_cnt_total
tx_cnt_total++;
END_PROBE_CODE:
PROBE_CODE_AFTER:
// test to be sure increment is working
vcast_probe_assert(  "Spot check the Count", tx_cnt == tx_cnt_total );
END_PROBE_CODE_AFTER:
PROBE_ID: 3
PROBE_UNIT: L1_RxTx
PROBE_LOCATION: AFTER_LAST_INCLUDE
PROBE_CODE:
// Data needed for testing
int tx_cnt_total = 0;
END_PROBE_CODE:
PROBE_ID: 1
PROBE_UNIT: L1_RxTx
PROBE_LOCATION: FUNCTION
PROBE_FUNCTION: comm_isr
PROBE_CODE:
vcast_probe_print( "FUNCTION ENTRANCE PP: ENTER comm_isr function\n" );
END_PROBE_CODE:
PROBE_CODE_AFTER:
vcast_probe_print( "FUNCTION EXIT PP: EXIT comm_isr function\n" );
END_PROBE_CODE_AFTER:
ENVIRO.END_PROBE_POINTS:
ENVIRO.END

